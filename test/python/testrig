#!/usr/bin/python
from answer import Downloader, Downloadable
import sys

url = 'http://dod.cs.northwestern.edu/xitao/eecs354/security.html'
hash = 'c76d5b140be25f57c7c199fc7ff9cc06'
hash2 = ''
d = Downloader(url, hash)
# Check superclass
print Downloadable in Downloader.__bases__
# Download (no checking)
d.download()
# Check hash
print d.hash() == hash
# Check encode
print d.encode() == hash2
# Check isValid
print d.isValid()
